[column]
	ui = auto
[branch]
	sort = -committerdate
[tag]
	sort = version:refname
[init]
	defaultBranch = main
[diff]
	algorithm = histogram  
	colorMoved = plain  
	mnemonicPrefix = true  
	renames = true
[alias]
	co = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | cut -c 3- | grep -v HEAD | grep -v '^remotes/' | fzf --preview 'echo {} | xargs git log --color --graph'); git checkout $(echo $branch | sed 's#remotes/[^/]*/##'); else git checkout $args; fi }; f"
	rco = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color --graph' | cut -c 3-); git checkout $(echo $branch | sed 's#remotes/[^/]*/##'); else git checkout $args; fi }; f"
	lg = log --color --graph --date=short --decorate=short --pretty=format:'%C(white)%h%Creset %C(blue)%cn%Creset %C(green)%cd%Creset %C(red reverse)%d%Creset %C(reset)%s' --all
	ls = !git lg | fzf -m --ansi --layout=reverse --preview=\"echo {} | sed 's/-.*$//' | egrep -o '[0-9a-f]{7,}' | xargs git show --color=always\"
	di = "!f() { args=$@; [ -z \"$args\" ] && args=HEAD; ([ \"$args\" = \"HEAD\" ] && git status --short || git diff --name-status $args | sed 's/\t/  /') | fzf --preview \"echo {} | cut -c 4- | xargs git diff --color=always $args --\" --multi --height 90% | cut -c 4-; }; f"
	sa = !git add $(git status -s | fzf -m | awk '{print $2}')
	stl = !git stash list | fzf --preview 'echo {} | cut -d: -f1 | xargs git stash show -p --color=always' --height 90% | cut -d: -f1
	sta = !git stl | xargs git stash apply
	std = !git stl | xargs git stash drop
	sd = !git diff | git-split-diffs --color | less -RFX
	pr = "!f() { git fetch origin pull/\"$1\"/head:pr-\"$1\" && git switch pr-\"$1\"; }; f"
	gone = ! git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs -r git branch -D
	stale = "!f() { git for-each-ref --format='%(committerdate:short) %(refname:short)' refs/heads | awk -v date=$(date -v-\"$1\"d +%Y-%m-%d) '$1 <= date && $2 !~ /(main|master|prod|develop)/ { print $2 }' | xargs -r git branch -D; }; f"
	open = "!f() { echo \"$(git remote get-url origin | sed -E 's/git@(.+)\\:(.+)\\.git/https:\\/\\/\\1\\/\\2/')\" | xargs open; }; f"
	newpr = "!f() { echo \"$(git remote get-url origin | sed -E 's/git@(.+)\\:(.+)\\.git/https:\\/\\/\\1\\/\\2/')/pull/new/$(git branch --show-current)\" | xargs open; }; f"
	rmtag = "!sh -c 'git tag -d $1 && git push origin --delete $1' -"

[pager]
	diff = delta
	log = delta
	reflog = delta
	show = delta
[interactive]
	diffFilter = delta --color-only
[gpg]
	program = gpg
[commit]
	gpgsign = true
[help]
	autocorrect = 1
[push]
	default = simple
	autoSetupRemote = true
	followTags = true
[pull]
	rebase = true
[fetch]
	prune = true
	pruneTags = true
	all = true
[rebase]
	autoSquash = true
	autoStash = true
	updateRefs = true
[merge]
	conflictstyle = zdiff3
[rerere]
	enabled = true
	autoupdate = true
